Provisional
Opcode,Regs (,Regs/Value/Pointer)

6,5,5
MOV Rx Ry       - 101110    Move contents of Ry to Rx
AND Rx Ry       - 101100    AND contents of regs
OR  Rx Ry       - 101000    OR contents of regs
ADD Rx Ry       - 100100    Add Rx and Ry; Store sum in Rx 
SUB Rx Ry       - 100010    Subtract Ry from Rx; Store diff in Rx
XOR Rx Ry       - 100001    XOR Rx and Ry; Store in Rx
CMP Rx Ry       - 100000    Set flag 1 if equal

11,5
CLR Rx          - 011110    Clear reg
NEG Rx          - 011100    2's complement of reg 
SLL Rx          - 011000    Logical left shift
SLR Rx          - 010100    Logical right shift
ROL Rx          - 010010    Rotate left
ROR Rx          - 010001    Rotate right
INC Rx          - 010000    Add 1 to Rx

5,3,8           Limited to 8 specific registers(8-15)
LDI Rx <x>      - 11110     Load immediate value into reg
ANDI Rx <x>     - 11100     AND reg and immediate value
ORI Rx <x>      - 11010     OR reg and immediate value
ADI Rx <x>      - 11001     Add immediate value to Rx; Store sum in Rx
SBI Rx <x>      - 11000     Subtract immediate value from Rx; Store diff in Rx           

8,8            
JMP 0xXXXX      - 11111100  Jump to PM address
BREQ 0xXXXX     - 11111010  Branch if equal flag is set 
BRZ  0xXXXX     - 11111001  Branch if zero flag is set
JPRL $xxxx      - 11111000  Relative jump wrt PC

11,5,16
LDA Rx $xxxx    - 1011111 0000   Load directly from address into reg
STA Rx $xxxx    - 1011110 0000   Store contents of reg into address

11,5
LDP Rx Rpy      - 0111111 1110   Load from memory pointed by (Rp+1 Rp) into reg - p 28
LDP Rx Rpz      - 0111111 1111   Load from memory pointed by (Rp+1 Rp) into reg - p 30
STP Rx Rptr     - 0111110 1110   Store contents of reg into address pointed by (Rp+1 Rp) - p 28
STP Rx Rptr     - 0111110 1111   Store contents of reg into address pointed by (Rp+1 Rp) - p 30

trivial
NOP             - 00010..0     No operation
BEGIN           - 0010...0